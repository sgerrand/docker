package pb;

message Error {
        // Only one may be set.
        optional bool not_exist = 1; // ENOENT
        optional bool read_only = 3; // EROFS
        optional bool not_dir = 4;   // ENOTDIR
        optional string other = 2; // maps to EIO, but prefer more specific ones
}

message AttrRequest {
        // One of name or handle must be set:
        optional string name = 1;
        optional uint64 handle = 2;
}

message AttrResponse {
        optional Attr attr = 1;
        optional Error err = 2;
}

message Attr {
        optional uint64 size = 1;
        optional uint64 atime_sec = 2;
        optional uint32 atime_nano = 3;
        optional uint64 mtime_sec = 4;
        optional uint32 mtime_nano = 5;
        optional uint32 mode = 6;
        optional uint32 nlink = 7;
}

message ReaddirRequest {
        required string name = 1;
}

message ReaddirResponse {
        optional Error err = 1;
        repeated DirEntry entry = 2;
}

message DirEntry {
        required string name = 1; // base name only
        optional uint32 mode = 2;
}

message ReadlinkRequest {
        required string name = 1;
}

message ReadlinkResponse {
        optional Error err = 1;
        optional string target = 2;
}

message ChmodRequest {
        // One of name or handle must be set:
        optional string name = 1;
        optional uint64 handle = 2;

        required uint32 mode = 3;
}

message ChmodResponse {
        optional Error err = 1;
}

message ChownRequest {
        // One of name or handle must be set:
        optional string name = 1;
        optional uint64 handle = 2;

        // This can set either the userid or the groupid, or both,
        // depending on what's set. The server should send both the numeric
        // and named version of the user and/or group, for the client to
        // determine the mapping, since the two machines will likely have
        // different sets of users.
        optional uint32 uid = 3;
        optional uint32 gid = 4;
        optional string user = 5;
        optional string group  = 6;
}

message ChownResponse {
        optional Error err = 1;
}

message Time {
        // Like a Go time.Time.
        required int64 sec = 1; // from unix epoch
        optional int32 nsec = 2;
}

message UtimeRequest {
        // One of name or handle must be set:
        optional string name = 1;
        optional uint64 handle = 2;

        optional Time atime = 3; // set if changing
        optional Time mtime = 4; // set if changing
}

message UtimeResponse {
        optional Error err = 1;
}

message TruncateRequest {
        // One of name or handle must be set:
        optional string name = 1;
        optional uint64 handle = 2;

        required uint64 size = 3;
}

message TruncateResponse {
        optional Error err = 1;
}

message LinkRequest {
        required string name = 1;
        required string target = 2;
}

message LinkResponse {
        optional Error err = 1;
}

message SymlinkRequest {
        required string value = 1;
        required string name = 2;
}

message SymlinkResponse {
        optional Error err = 1;
}

message MkdirRequest {
        optional string name = 1;
        optional uint32 mode = 2;
}

message MkdirResponse {
        optional Error err = 1;
}

message MknodRequest {
        required string name = 1;
        required uint32 mode = 2;
        optional uint32 dev = 3;
}

message MknodResponse {
        optional Error err = 1;
}

message RenameRequest {
        required string name = 1;
        required string target = 2;
}

message RenameResponse {
        optional Error err = 1;
}

message RmdirRequest {
        required string name = 1;
}

message RmdirResponse {
        optional Error err = 1;
}

message UnlinkRequest {
        required string name = 1;
}

message UnlinkResponse {
        optional Error err = 1;
}

message OpenRequest {
        required string name = 1;
        optional uint32 flags = 2;
}

message OpenResponse {
        optional Error err = 1;
        optional uint64 handle = 2;
}

message CreateRequest {
        required string name = 1;
        optional uint32 flags = 2;
        optional uint32 mode = 3;
}

message CreateResponse {
        optional Error err = 1;
        optional uint64 handle = 2;
}

message ReadRequest {
        required uint64 handle = 1;
        required uint64 offset = 2;
        required uint64 size = 3; // probably also a max of uint32
}

message ReadResponse {
        // One will be set:
        optional Error err = 1;
        optional bytes data = 2;
}

message WriteRequest {
        required uint64 handle = 1;
        required uint64 offset = 2;
        optional bytes data = 3;
}

message WriteResponse {
        optional Error err = 1;
        optional uint64 written = 2; // note: is uint32 in FUSE API?
}

message CloseRequest {
        required uint64 handle = 1;
}

message CloseResponse {
        optional Error err = 1;
}
